{"\u041c\u043e\u0440\u0441\u043a\u043e\u0439 \u0431\u043e\u0439": "\ndef vertical(matrix):\n    matrix_new = []\n    for i in range(1, len(matrix) + 1):\n        matrix_new.append(matrix[len(matrix) - i])\n    return matrix_new\n# \u0437\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043f\u043e\u044f\u0441\u043d\u0438\u043b. \u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438\n\n\ndef gorrizontal(matrix):\n    matrix_new = []\n    for i in range(len(matrix)):\n        kkk = []\n        for j in range(1, len(matrix[i]) + 1):\n            kkk.append(matrix[i][len(matrix[i]) - j])\n        matrix_new.append(kkk)\n    return matrix_new\n\n\ndef trans(matrix):\n    matrix_new = []\n    for i in range(len(matrix)):\n        kkk = []\n        for j in range(len(matrix[i])):\n            kkk.append(matrix[j][i])\n        matrix_new.append(kkk)\n    return matrix_new\n\n\nmatrix = [['x', 'x', 'x', '.'],\n          ['.', '.', '.', '.'],\n          ['x', '.', 'x', 'x'],\n          ['x', '.', '.', '.']]\n# \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u0438\u043d\u043f\u0443\u0442\n\nfor elem in matrix:\n    for el in elem:\n        print(el, end='')\n    print()\nprint()\n\nfor elem in gorrizontal(matrix):\n    for el in elem:\n        print(el, end='')\n    print()\nprint()\n\nfor elem in vertical(matrix):\n    for el in elem:\n        print(el, end='')\n    print()\nprint()\n\nfor elem in trans(matrix):\n    for el in elem:\n        print(el, end='')\n    print()\nprint()\n\nfor elem in vertical(gorrizontal(matrix)):\n    for el in elem:\n        print(el, end='')\n    print()\nprint()\n\nfor elem in trans(gorrizontal(matrix)):\n    for el in elem:\n        print(el, end='')\n    print()\nprint()\n\nfor elem in trans(vertical(matrix)):\n    for el in elem:\n        print(el, end='')\n    print()\nprint()\n\n\nfor elem in gorrizontal(vertical(trans(matrix))):\n    for el in elem:\n        print(el, end='')\n    print()\n", "\u041e\u043f\u043e\u0437\u0434\u0430\u043d\u0438\u0435": "\ndef late(now, classes, bus):\n    now = int(now.split(':')[0]) * 60 + int(now.split(':')[1])\n    classes = int(classes.split(':')[0]) * 60 + int(classes.split(':')[1])\n    pp = []\n    for elem in bus:\n        if elem < 5:\n            continue\n        else:\n            if now + elem + 15 <= classes:\n                pp.append(elem - 5)\n    if len(pp) == 0:\n        return '\u041e\u043f\u043e\u0437\u0434\u0430\u043d\u0438\u0435'\n    return '\u0412\u044b\u0439\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 ' + str(max(pp)) + ' \u043c\u0438\u043d\u0443\u0442' ", "\u041d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c": "\ndef password_level(password):\n    if len(password) < 6:\n        return '\u041d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c'\n    fag = 0\n    for elem in password:\n        if elem in '1234567890':\n            fag = 1\n    if password.isdigit() or ((password == password.lower() or password == password.upper()) \n                              and fag == 0):\n        return '\u041d\u0435\u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c'\n    if (password != password.lower() or password != password.upper()) and fag == 0:\n        return '\u0421\u043b\u0430\u0431\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c'\n    if (password == password.lower() or password == password.upper()) and fag == 1:\n        return '\u0421\u043b\u0430\u0431\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c'\n    return '\u041d\u0430\u0434\u0435\u0436\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c' ", "\u041f\u0438\u043d-\u043a\u043e\u0434": "\ndef check_pin(pinCode):\n    a = int(pinCode.split('-')[0])\n    b = pinCode.split('-')[1]\n    c = int(pinCode.split('-')[2])\n    for i in range(2, a // 2):\n        if a % i == 0 and a != 1:\n            return '\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d'\n    if a == 1:\n        return '\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d'\n\n    if b[len(b)::-1] != b:\n        return '\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d'\n\n    while c != 1:\n        if c % 2 != 0:\n            return '\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d'\n        c = c / 2\n\n    return '\u041a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d' ", "\u0414\u043b\u0438\u043d\u0430 \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0443\u0433\u0430": "\nPI = 3.14159\n\n\ndef circle_length(radius):\n    return 2 * PI * radius\n\n\ndef circle_area(radius):\n    return PI * (radius ** 2)\n\n\ndef main():\n    radius = float(input())\n    print(circle_length(radius), circle_area(radius))\n", "\u041a\u043e\u0440\u043d\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f": "\ndef larger_root(p, q):\n    return max(-p + (discriminant(1, p, q) ** 0.5), -p - (discriminant(1, p, q) ** 0.5)) / 2\n\n\ndef smaller_root(p, q):\n    return min(-p + (discriminant(1, p, q) ** 0.5), -p - (discriminant(1, p, q) ** 0.5)) / 2\n\n\ndef discriminant(a, b, c):\n    return b ** 2 - 4 * a * c\n\n\ndef main():\n    p, q = float(input()), float(input())\n    print(discriminant(1, p, q))\n    print(smaller_root(p, q))\n    print(larger_root(p, q))\n\n", "\u0417\u0430\u0438\u043a\u0430\u043d\u0438\u0435": "\nmes = []\n\n\ndef print_without_duplicates(message):\n    if message not in mes:\n        print(message)\n        mes.append(message)\n    if message != mes[len(mes) - 1]:\n        mes.clear()", "\u0414\u043b\u0438\u043d\u043d\u044b\u0439 \u0447\u0435\u043a": "\nproducts = list()\nnumber = 1\n\n\ndef add_item(name, price):\n    products.append((name, price))\n\n\ndef print_receipt():\n    global number\n\n    if len(products) == 0:\n        return None\n\n    print(f'\u0427\u0435\u043a {number}. \u0412\u0441\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432: {len(products)}')\n    result = 0\n    for elem in products:\n        result += elem[1]\n        print(f'{elem[0]} - {elem[1]}')\n    print(f'\u0418\u0442\u043e\u0433\u043e: {result}')\n    print('-----')\n    products.clear()\n    number += 1", "\u042f \u0432\u0430\u0441 \u0437\u043d\u0430\u044e": "\nname = ''\n\n\ndef polite_input(question):\n    global name\n    if name != '':\n        name = name\n    else:\n        name = input('\u041a\u0430\u043a \u0432\u0430\u0441 \u0437\u043e\u0432\u0443\u0442? \n')\n    return input(f'{name}, {question} \n')\n \u0412 9 \u0438 10 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0432 \u043a\u043e\u043d\u0446\u0435 \\ n", "\u0412\u0435\u0447\u0435\u0440\u0438\u043d\u043a\u0430": "\npersones = {}\n\n\ndef add_friends(name_of_person, list_of_friends):\n    a = persones.get(name_of_person)\n    if a:\n        persones[name_of_person] = a + list_of_friends\n    else:\n        persones[name_of_person] = list_of_friends\n\n\ndef are_friends(name_of_person1, name_of_person2):\n    if name_of_person2 in persones[name_of_person1]:\n        return True\n    return False\n\n\ndef print_friends(name_of_person):\n    s = reversed(persones[name_of_person])\n    for i in s:\n        print(i, end=' ')\n    print()\n\n    ", "\u0410\u0437\u0431\u0443\u043a\u0430 \u041c\u043e\u0440\u0437\u0435": "\n# \u0441\u043b\u043e\u0432\u043d\u0438\u043a \u0431\u0443\u043a\u0432\u0438-\u043a\u043e\u0434\u0438\nMorseCode = {'A': '\u00b7\u2212',\n             'B': '\u2212\u00b7\u00b7\u00b7',\n             'C': '\u2212\u00b7\u2212\u00b7',\n             'D': '\u2212\u00b7\u00b7',\n             'E': '\u00b7',\n             'F': '\u00b7\u00b7\u2212\u00b7',\n             'G': '\u2212\u2212\u00b7',\n             'H': '\u00b7\u00b7\u00b7\u00b7',\n             'I': '\u00b7\u00b7',\n             'J': '\u00b7\u2212\u2212\u2212',\n             'K': '\u2212\u00b7\u2212',\n             'L': '\u00b7\u2212\u00b7\u00b7',\n             'M': '\u2212\u2212',\n             'N': '\u2212\u00b7',\n             'O': '\u2212\u2212\u2212',\n             'P': '\u00b7\u2212\u2212\u00b7',\n             'R': '\u00b7\u2212\u00b7',\n             'S': '\u00b7\u00b7\u00b7',\n             'T': '\u2212',\n             'U': '\u00b7\u00b7\u2212',\n             'V': '\u00b7\u00b7\u00b7\u2212',\n             'W': '\u00b7\u2212\u2212',\n             'X': '\u2212\u00b7\u00b7\u2212',\n             'Y': '\u2212\u00b7\u2212\u2212',\n             'Z': '\u2212\u2212\u00b7\u00b7',\n             ' ': '  '}\n\n\n# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c\u043e \u0432 \u0430\u0431\u0435\u0442\u043a\u0443 \u043c\u043e\u0440\u0437\u0435\ndef encode_to_morse(text):\n    stroka = ''\n    for elem in text.upper():\n        stroka += MorseCode[elem] + ' '\n    return stroka\n\n\n# \u0440\u043e\u0437\u043a\u043e\u0434\u0443\u0454\u043c\u043e \u0437 \u0430\u0431\u0435\u0442\u043a\u0438 \u043c\u043e\u0440\u0437\u0435\ndef decode_from_morse(code):\n    stroka = ''\n    code = code.split()\n    for elem in code:\n        for key, val in MorseCode.items():\n            if val == elem:\n                stroka += key\n    return stroka\n\n\ndef main():\n    print('if you what to decode the message, click on 1, to code click random values except 1')\n    if input() == '1':\n        print('write code morse')\n        print(decode_from_morse(input()))\n    else:\n        print('write text')\n        print(encode_to_morse(input()))\n", "\u0411\u044e\u0440\u043e\u043a\u0440\u0430\u0442\u0438\u044f": "\npersons = {}\nlast_person = \"\"\n\n\ndef setup_profile(name, vacation_dates):\n    global last_person\n    persons[name] = vacation_dates\n    last_person = name\n\n\ndef print_application_for_leave():\n    print(f\"\u0417\u0430\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0442\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0438\u043e\u0434 {persons[last_person]}. {last_person}\")\n\n\ndef print_holiday_money_claim(amount):\n    print(f\"\u041f\u0440\u043e\u0448\u0443 \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c {amount} \u043e\u0442\u043f\u0443\u0441\u043a\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433. {last_person}\")\n\n\ndef print_attorney_letter(to_whom):\n    print(f\"\u041d\u0430 \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043f\u0443\u0441\u043a\u0430 \u0432 \u043f\u0435\u0440\u0438\u043e\u0434 {persons[last_person]} \"\n          f\"\u043c\u043e\u0438\u043c \u0437\u0430\u043c\u0435\u0441\u0442\u0438\u0442\u0435\u043b\u0435\u043c \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f {to_whom}. {last_person}\")\n", "\u041d\u0420\u0417\u0411\u0420\u0427\u0412": "\ntranslated_text = None\n\n\ndef translate(translated):\n    global translated_text\n    translated = translated.split('\u0443')\n    translated = ''.join(translated)\n    translated = translated.split('\u0423')\n    translated = ''.join(translated)\n    translated = translated.split('\u0435')\n    translated = ''.join(translated)\n    translated = translated.split('\u0415')\n    translated = ''.join(translated)\n    translated = translated.split('\u0430')\n    translated = ''.join(translated)\n    translated = translated.split('\u0410')\n    translated = ''.join(translated)\n    translated = translated.split('\u044b')\n    translated = ''.join(translated)\n    translated = translated.split('\u041e')\n    translated = ''.join(translated)\n    translated = translated.split('\u043e')\n    translated = ''.join(translated)\n    translated = translated.split('\u044d')\n    translated = ''.join(translated)\n    translated = translated.split('\u042d')\n    translated = ''.join(translated)\n    translated = translated.split('\u044f')\n    translated = ''.join(translated)\n    translated = translated.split('\u042f')\n    translated = ''.join(translated)\n    translated = translated.split('\u0418')\n    translated = ''.join(translated)\n    translated = translated.split('\u0438')\n    translated = ''.join(translated)\n    translated = translated.split('\u044e')\n    translated = ''.join(translated)\n    translated = translated.split('\u042e')\n    translated = ''.join(translated)\n    translated = translated.split('\u0451')\n    translated = ''.join(translated)\n    translated = translated.split('\u0401')\n    translated = ''.join(translated)\n    translated = translated.split('.')\n    translated = ''.join(translated)\n    translated = translated.split(',')\n    translated = ''.join(translated)\n    translated = translated.split('!')\n    translated = ''.join(translated)\n    translated = translated.split('?')\n    translated = ''.join(translated)\n    translated = translated.split('-')\n    translated = ''.join(translated)\n    translated = translated.split()\n    translated = ' '.join(translated)\n    translated_text = translated\n    return translated_text\n", "\u041d\u0435\u0441\u0432\u0435\u0436\u0438\u0435 \u0430\u043d\u0435\u043a\u0434\u043e\u0442\u044b": "\nshutka = []\n\n\ndef print_only_new(message):\n    if message not in shutka:\n        print(message)\n        shutka.append(message)", "\u0410\u0439\u0431\u043e\u043b\u0438\u0442": "\ndef hello(name):\n    print('\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, ' + name + '! \u0412\u0430\u0448\u0443 \u043a\u0430\u0440\u0442\u0443 \u0438\u0449\u0443\u0442...')\n\n\ndef search_card(name):\n    k = 0\n    for i in range(len(base)):\n        if name == base[i]:\n            print('\u0412\u0430\u0448\u0430 \u043a\u0430\u0440\u0442\u0430 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c ' + str(i + 1) + ' \u043d\u0430\u0439\u0434\u0435\u043d\u0430')\n            k = 1\n            break\n    if k == 0:\n        print('\u0412\u0430\u0448\u0430 \u043a\u0430\u0440\u0442\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430')", "\u0421\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440": "\nlastTicket = 0\n\n\ndef lucky(ticket):\n    if ((ticket % 10 + ticket // 10 % 10 + ticket // 100 % 10 ==\n            ticket // 1000 % 10 + ticket // 10000 % 10 + ticket // 100000 % 10) and\n        (lastTicket % 10 + lastTicket // 10 % 10 + lastTicket // 100 % 10 ==\n            lastTicket // 1000 % 10 + lastTicket // 10000 % 10 + lastTicket // 100000 % 10)):\n        return '\u0421\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439'\n    else:\n        return '\u041d\u0435\u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439' ", "\u0414\u0435\u043b\u0430\u0439\u0442\u0435 \u0432\u0430\u0448\u0438 \u0441\u0442\u0430\u0432\u043a\u0438": "\ndef do_bet(horse, bet):\n    if bet == 0 or horse in horses or horse > 10 or horse <= 0:\n        print('\u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437')\n        return\n    else:\n        print('\u0412\u0430\u0448\u0430 \u0441\u0442\u0430\u0432\u043a\u0430 \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0435', bet, '\u043d\u0430 \u043b\u043e\u0448\u0430\u0434\u044c', horse, '\u043f\u0440\u0438\u043d\u044f\u0442\u0430')\n        horses.append(horse)\n        return\n\n\nhorses = []", "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c": "\ndef get_transactions(t):\n    if t == 'print_it':\n        for i in dctt:\n            print(dctt[i], i, dctm[i])\n        return None\n    ss = t[t.find('-') + 1:t.find(':')]\n    momey = int(t[t.find(':') + 1:])\n    if ss in dctt:\n        dctt[ss] += 1\n        dctm[ss] += momey\n    if ss not in dctt:\n        dctt[ss] = 1\n        dctm[ss] = momey\n\n\ndctt = {}\ndctm = {}", "\u0420\u0438\u043c\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b": "\ndef roman():\n    chisla = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    bukvi = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    global one\n    global two\n    global three\n    three = one + two\n\n    res1 = ''\n    kk = 0\n    n1 = one\n    while n1 > 0:\n        while n1 >= chisla[kk]:\n            res1 += bukvi[kk]\n            n1 -= chisla[kk]\n        kk += 1\n\n    res2 = ''\n    kk = 0\n    n2 = two\n    while n2 > 0:\n        while n2 >= chisla[kk]:\n            res2 += bukvi[kk]\n            n2 -= chisla[kk]\n        kk += 1\n\n    res3 = ''\n    kk = 0\n    n3 = three\n    while n3 > 0:\n        while n3 >= chisla[kk]:\n            res3 += bukvi[kk]\n            n3 -= chisla[kk]\n        kk += 1\n\n    print(res1 + ' + ' + res2 + ' = ' + res3)", "\u0417\u0434\u043e\u0440\u043e\u0432\u043e\u0435 \u043f\u0438\u0442\u0430\u043d\u0438\u0435": "\ndef diet(s):\n    food = {\n        '\u0436\u0438\u0440\u043d\u043e\u0435': ['\u0433\u0430\u043c\u0431\u0443\u0440\u0433\u0435\u0440'],\n        '\u0441\u043b\u0430\u0434\u043a\u043e\u0435': ['\u043f\u0435\u0447\u0435\u043d\u044c\u0435', '\u0447\u0430\u0439', '\u0441\u0430\u0445\u0430\u0440', '\u0442\u043e\u0440\u0442', '\u043c\u0451\u0434'],\n        '\u043c\u0443\u0447\u043d\u043e\u0435': ['\u043f\u0435\u0447\u0435\u043d\u044c\u0435'],\n        '\u0434\u0438\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435': ['\u0442\u0432\u043e\u0440\u043e\u0433', '\u0444\u0440\u0443\u043a\u0442\u044b', '\u043a\u0430\u0448\u0430', '\u0440\u0438\u0441', '\u043e\u0432\u043e\u0449\u0438', '\u0437\u0435\u043b\u0435\u043d\u044c']}\n\n    s = s.split(', ')\n    counter = 0\n    for i in s:\n        if i in food['\u0434\u0438\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435']:\n            counter += 1\n    if float(counter) >= len(s) / 2:\n        return '\u0422\u0430\u043a \u0434\u0435\u0440\u0436\u0430\u0442\u044c, \u0412\u043e\u0438\u043d \u0414\u0440\u0430\u043a\u043e\u043d\u0430!'\n    return '\u041d\u0435 \u0435\u0448\u044c \u0441\u0442\u043e\u043b\u044c\u043a\u043e, \u041f\u043e!'\n", "\u0410\u0439\u0431\u043e\u043b\u0438\u0442 2.0": "\ndef hello(name):\n    global query\n    if not all(query):\n        query[query.index(None)] = name\n        print(f\"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, {name}! \u041f\u043e\u0434\u043e\u0439\u0434\u0438\u0442\u0435 \u043a \u043e\u043a\u043e\u0448\u043a\u0443 \u043d\u043e\u043c\u0435\u0440 {query.index(name) + 1}\")\n    else:\n        print(f\"\u041f\u0440\u043e\u0441\u0442\u0438\u0442\u0435, {name}. \u0412\u0441\u0435 \u043e\u043a\u043d\u0430 \u0437\u0430\u043d\u044f\u0442\u044b\")\n\n\ndef search_card(name):\n    global query, base\n    if name in query:\n        if name in base:\n            print(f\"\u0412\u0430\u0448\u0430 \u043a\u0430\u0440\u0442\u0430 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c {base.index(name) + 1} \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n        else:\n            print(\"\u0412\u0430\u0448\u0430 \u043a\u0430\u0440\u0442\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n    else:\n        print(f\"\u041f\u0440\u043e\u0441\u0442\u0438\u0442\u0435, {name}, \u0434\u043e\u0436\u0434\u0438\u0442\u0435\u0441\u044c \u0441\u0432\u043e\u0435\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\")\n\n\ndef good_bye(name):\n    global query\n    if name in query:\n        print(f\"\u0414\u043e \u0441\u0432\u0438\u0434\u0430\u043d\u0438\u044f, \u043d\u0435 \u0431\u043e\u043b\u0435\u0439\u0442\u0435, {name}\")\n        query[query.index(name)] = None\n    else:\n        print(f\"\u041f\u0440\u043e\u0441\u0442\u0438\u0442\u0435, {name}, \u0434\u043e\u0436\u0434\u0438\u0442\u0435\u0441\u044c \u0441\u0432\u043e\u0435\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\")", "\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u043f\u0443\u0433\u0430\u0439": "\nis_said = set()\n\n\ndef parrot(line):\n    if line in is_said:\n        print(line)\n    else:\n        is_said.add(line)", "\u0421\u0447\u0451\u0442 \u0437\u0430 \u043e\u0431\u0435\u0434": "\ndef count_food(days):\n    summ = 0\n    for elem in days:\n        summ += daily_food[elem - 1]\n    return summ", "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435": "\n# \u0415\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a\nspisok = ['228', '\u0438\u0433\u043e\u0440\u044c \u0443\u043c\u043d\u044b\u0439', '\u044f \u0433\u043b\u0443\u043f\u044b\u0439']\n# sort()\nprint(spisok.sort())\ngg = spisok.sort()\nspisok[0] = '\u0430\u043b\u0444\u0430\u0432\u0438\u0442'\nprint(gg, spisok)\nprint()\n#\nprint(sorted(spisok))\ngg = sorted(spisok)\nspisok[0] = '\u043b\u0438\u0446\u0435\u0439'\nprint(gg, spisok)", "\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435 \u0440\u044f\u0434": "\ndef continue_fibonacci_sequence(sequence, n):\n    for i in range(n):\n        next_element = sequence[-1] + sequence[-2]\n        sequence.append(next_element)\n", "\u0417\u0435\u0440\u043a\u0430\u043b\u043e": "\ndef mirror(arr):\n    mirrored_part = reversed(arr)\n    arr.extend(mirrored_part)\n", "\u0424\u0440\u0430\u043a\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u2014 1": "\nfractal = []\nfractal.append(0)\nfractal.append(fractal)\nfractal.append(fractal)\nfractal.append(2)", "\u041e\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043c\u0435\u0441\u0442": "\ni = ['a', '~', 'p']\nloc = i\ni += ['slovo', 'bukva', 'jojo']\nprint(loc)\n\ni = ['a', '~', 'p']\nloc = i\ni = i + ['slovo', 'bukva', 'jojo']\nprint(loc)", "\u0427\u0442\u043e \u0442\u044b \u0438\u043c\u0435\u043b\u0430 \u0432 \u0432\u0438\u0434\u0443?": "\nnumbers = [2, 5, 7, 7, 8, 4, 1, 6]\nodd = []\neven = []\nfor number in numbers:\n    if number % 2 == 0:\n        even.append(number)\n    else:\n        odd.append(number)\n", "\u0427\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435": "\ndef from_string_to_list(string, container):\n    string = string.split()\n    string = list(map(int, string))\n    container += string\n\n", "\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435": "\ndef transpose(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    new_matrix = [[] for _ in range(m)]\n    for j in range(m):\n        for i in range(n):\n            new_matrix[j].append(matrix[i][j])\n\n    matrix.clear()\n    for i in range(len(new_matrix)):\n        matrix.append(new_matrix[i])", "\u041e\u0431\u043c\u0435\u043d \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u044f\u043c\u0438": "\ndef swap(first, second):\n    first[:], second[:] = second.copy(), first.copy()", "\u0424\u0440\u0430\u043a\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u2013 2": "\ndef defractalize(fractal):\n    while fractal in fractal:\n        fractal.remove(fractal)", "\u041f\u0435\u0447\u0430\u0442\u044c \u0444\u0440\u0430\u043a\u0442\u0430\u043b\u0430": "\ndef fractal_print(obj):\n    print('[' + ', '.join(map(str, obj)) + ']')", "\u0424\u0440\u0430\u043a\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e": "\nblack = []\nwhite = []\nblack.append(white)\nblack.append(white)\nblack.append(white)\nwhite.append(black)\nwhite.append(black)\nwb_tree = black", "\u041c\u0430\u0442\u0440\u0438\u0446\u0430": "\ndef matrix(n=1, m='[eq', a=0):\n    if m == '[eq':\n        m = n\n    mm = []\n    for i in range(n):\n        mm.append(m * [a])\n    return mm", "\u0411\u0430\u0440\u0438\u0441\u0442\u0430": "\ndef choose_coffee(*perfomance):\n    fag = 0\n    for elem in perfomance:\n        if elem == '\u042d\u0441\u043f\u0440\u0435\u0441\u0441\u043e':\n            if ingredients[0] >= 1:\n                fag = 1\n                ingredients[0] -= 1\n                return '\u042d\u0441\u043f\u0440\u0435\u0441\u0441\u043e'\n        elif elem == '\u041a\u0430\u043f\u0443\u0447\u0438\u043d\u043e':\n            if ingredients[0] >= 1 and ingredients[1] >= 3:\n                fag = 1\n                ingredients[0] -= 1\n                ingredients[1] -= 3\n                return '\u041a\u0430\u043f\u0443\u0447\u0438\u043d\u043e'\n        elif elem == '\u041c\u0430\u043a\u043a\u0438\u0430\u0442\u043e':\n            if ingredients[0] >= 2 and ingredients[1] >= 1:\n                fag = 1\n                ingredients[0] -= 2\n                ingredients[1] -= 1\n                return '\u041c\u0430\u043a\u043a\u0438\u0430\u0442\u043e'\n        elif elem == '\u041a\u043e\u0444\u0435 \u043f\u043e-\u0432\u0435\u043d\u0441\u043a\u0438':\n            if ingredients[0] >= 1 and ingredients[2] >= 2:\n                fag = 1\n                ingredients[0] -= 1\n                ingredients[2] -= 2\n                return '\u041a\u043e\u0444\u0435 \u043f\u043e-\u0432\u0435\u043d\u0441\u043a\u0438'\n        elif elem == '\u041b\u0430\u0442\u0442\u0435 \u041c\u0430\u043a\u043a\u0438\u0430\u0442\u043e':\n            if ingredients[0] >= 1 and ingredients[1] >= 2 and ingredients[2] >= 1:\n                fag = 1\n                ingredients[0] -= 1\n                ingredients[1] -= 2\n                ingredients[2] -= 1\n                return '\u041b\u0430\u0442\u0442\u0435 \u041c\u0430\u043a\u043a\u0438\u0430\u0442\u043e'\n        elif elem == '\u041a\u043e\u043d \u041f\u0430\u043d\u043d\u0430':\n            if ingredients[0] >= 1 and ingredients[2] >= 1:\n                fag = 1\n                ingredients[0] -= 1\n                ingredients[2] -= 1\n                return '\u041a\u043e\u043d \u041f\u0430\u043d\u043d\u0430'\n    if fag == 0:\n        return '\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0412\u0430\u043c \u043d\u0430\u043f\u0438\u0442\u043e\u043a'\n", "\u0421\u043f\u0430\u043c\u043e\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440": "\ndef spamdegenerator(name, date, email, place='\u0420\u0430\u0441\u0447\u0435\u043b\u0435\u043d\u0438\u043d\u0433\u0440\u0430\u0434'):\n    print('To: ' + email)\n    print('\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435, ' + name + '!')\n    print('\u0411\u044b\u043b\u0438 \u0431\u044b \u0440\u0430\u0434\u044b \u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0430\u0441 \u043d\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u0432 \u0432 ' + place + ', \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0439\u0434\u0435\u0442 ' + date + '.')", "\u0426\u0435\u0437\u0430\u0440\u044c": "\ndef encrypt_caesar(msg, shift=3):\n    new_string = ''\n    for wor in msg:\n        if wor.isalpha():\n            if wor.isupper():\n                new_string += chr((ord(wor) - ord('\u0410') + shift) % 32 + ord('\u0410'))\n            else:\n                new_string += chr((ord(wor) - ord('\u0430') + shift) % 32 + ord('\u0430'))\n        else:\n            new_string += wor\n    return new_string\n\n\ndef decrypt_caesar(msg, shift=3):\n    new_string = ''\n    for wor in msg:\n        if wor.isalpha():\n            if wor.isupper():\n                new_string += chr((ord(wor) - ord('\u0410') - shift) % 32 + ord('\u0410'))\n            else:\n                new_string += chr((ord(wor) - ord('\u0430') - shift) % 32 + ord('\u0430'))\n        else:\n            new_string += wor\n    return new_string", "\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b": "\ndef partial_sums(*spisok):\n    kk = [0]\n    for i in range(len(spisok)):\n        kk.append(sum(spisok[:i + 1]))\n    return kk", "\u0414\u0430\u0440\u0442\u0441": "\ndef score(navalny, cector=0):\n    if cector == 0:\n        return scoring[navalny]\n    return scoring[navalny][cector]", "\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u043d\u0435 \u0432\u044b\u0448\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u2014 \u0447\u0430\u0441\u0442\u044c 2": "\ndef solve(*coefficients):\n    if len(coefficients) == 3:\n        a = coefficients[0]\n        b = coefficients[1]\n        c = coefficients[2]\n    elif len(coefficients) == 2:\n        a = 0\n        b = coefficients[0]\n        c = coefficients[1]\n    elif len(coefficients) == 1:\n        a = 0\n        b = 0\n        c = coefficients[0]\n    else:\n        return None\n    revurs = []\n    if a != 0 and b != 0 and (b ** 2 - 4 * a * c) < 0:\n        revurs = []\n    elif a != 0 and b != 0 and (b ** 2 - 4 * a * c) != 0:\n        x1 = (-b + ((b ** 2 - 4 * a * c) ** 0.5)) / (2 * a)\n        x2 = (-b - ((b ** 2 - 4 * a * c) ** 0.5)) / (2 * a)\n        revurs.append(x1)\n        revurs.append(x2)\n    elif a != 0 and b != 0 and (b ** 2 - 4 * a * c) == 0:\n        x1 = -b / (2 * a)\n        revurs.append(x1)\n    elif a == 0 and b == 0 and c == 0:\n        revurs.append('all')\n    elif a == 0 and b == 0:\n        revurs = []\n    elif a == 0:\n        revurs.append(-c / b)\n    return revurs", "\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u043d\u0435 \u0432\u044b\u0448\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u2014 \u0447\u0430\u0441\u0442\u044c 3": "\ndef solve(*coefficients):\n    if len(*coefficients) == 3:\n        a = coefficients[0][0]\n        b = coefficients[0][1]\n        c = coefficients[0][2]\n    elif len(*coefficients) == 2:\n        a = 0\n        b = coefficients[0][0]\n        c = coefficients[0][1]\n    elif len(*coefficients) == 1:\n        a = 0\n        b = 0\n        c = coefficients[0][0]\n    else:\n        return None\n    revurs = []\n    if a != 0 and b != 0 and (b ** 2 - 4 * a * c) < 0:\n        revurs = []\n    elif a != 0 and b != 0 and (b ** 2 - 4 * a * c) != 0:\n        x1 = (-b + ((b ** 2 - 4 * a * c) ** 0.5)) / (2 * a)\n        x2 = (-b - ((b ** 2 - 4 * a * c) ** 0.5)) / (2 * a)\n        revurs.append(x1)\n        revurs.append(x2)\n    elif a != 0 and b != 0 and (b ** 2 - 4 * a * c) == 0:\n        x1 = -b / (2 * a)\n        revurs.append(x1)\n    elif a == 0 and b == 0 and c == 0:\n        revurs.append('all')\n    elif a == 0 and b == 0:\n        revurs = []\n    elif a == 0:\n        revurs.append(-c / b)\n    return revurs\n\n\nprint(*solve(list(map(float, input().split()))))", "\u041d\u0430\u0431\u043e\u0440 \u044e\u043d\u043e\u0433\u043e \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u043a\u0430": "\ndef arithmetic_operation(operation):\n    if operation == '+':\n        return lambda x, y: x + y\n    elif operation == '-':\n        return lambda x, y: x - y\n    elif operation == '*':\n        return lambda x, y: x * y\n    elif operation == '/':\n        return lambda x, y: x / y", "\u041f\u0440\u043e\u0441\u0442\u043e map": "\ndef simple_map(transformation, values):\n    return [transformation(elem) for elem in values]", "\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0439 \u0438 \u0432\u043b\u0430\u0441\u0442\u0432\u0443\u0439": "\ndef gopa(r):\n    if r % 9 == 0:\n        return r\n\n\nprint(sum(list(map(lambda h: h ** 2, filter(gopa, list(range(10, 100)))))))", "\u041c\u0438\u043c\u0438\u043a\u0440\u0438\u044f": "\ntransformation = lambda j: j", "\u041a\u043e\u043b\u043b\u0431\u044d\u043a\u0438": "\n              gl = 'aeiouy'\n\n\ndef ask_password(login, password, success, failure):\n    gl_password = list(map(lambda x: x.lower(), filter(lambda x: x.lower() in gl, password)))\n    sog_password = list(map(lambda x: x.lower(), filter(lambda x: x.lower() not in gl, password)))\n    sog_login = list(map(lambda x: x.lower(), filter(lambda x: x.lower() not in gl, login)))\n    if len(gl_password) == 3 and (sog_password == sog_login):\n        success(login)\n        return (True, '')\n    if len(gl_password) != 3 and (sog_password == sog_login):\n        failure(login, \"Wrong number of vowels\")\n        return (False, 'Wrong number of vowels')\n    if len(gl_password) == 3 and (sog_password != sog_login):\n        failure(login, \"Wrong consonants\")\n        return (False, \"Wrong consonants\")\n    if len(gl_password) != 3 and (sog_password != sog_login):\n        failure(login, \"Everything is wrong\")\n        return (False, \"Everything is wrong\")\n\n\ndef success(login):\n    return\n\n\ndef failure(login, mes):\n    return\n\n\ndef main(login, password):\n    e, mes = ask_password(login, password, success, failure)\n    if e:\n        print('\u041f\u0440\u0438\u0432\u0435\u0442, ' + login.lower() + '!')\n    else:\n        print('\u041a\u0442\u043e-\u0442\u043e \u043f\u044b\u0442\u0430\u043b\u0441\u044f \u043f\u0440\u0438\u0442\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c ' + login.lower() + ', \u043d\u043e \u0432 \u043f\u0430\u0440\u043e\u043b\u0435 '\n                                                                             '\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043b \u043e\u0448\u0438\u0431\u043a\u0443: ' + mes.upper() + '.')", "\u0421\u0430\u043c\u0430\u044f \u0434\u0430\u043b\u0451\u043a\u0430\u044f \u043f\u043b\u0430\u043d\u0435\u0442\u0430": "\nfrom math import pi\n\n\ndef find_farthest_orbit(list_of_orbits):\n    max_orbit = 0\n    orbits = [elem for elem in list_of_orbits if elem[0] != elem[1]]\n    s_orbits = [pi * elem[0] * elem[1] for elem in orbits]\n    result = [elem for elem in orbits if pi * elem[0] * elem[1] == max(s_orbits)]\n    return result[0]", "\u041f\u0430\u043c-\u043f\u0430\u0440\u0430\u043c \u043f\u0430\u0440\u0430\u043c-\u043f\u0430\u043c \u043f\u0430\u0440\u0430\u043c": "\ndef a(sr):\n    return sum(1 for i in sr if i in '\u0451\u0443\u0435\u044b\u0430\u043e\u044f\u0438\u044e')\n\n\ns = input().lower().split()\nif all([a(i) == a(s[0]) for i in s]):\n    print('\u041f\u0430\u0440\u0430\u043c \u043f\u0430\u043c-\u043f\u0430\u043c')\nelse:\n    print('\u041f\u0430\u043c \u043f\u0430\u0440\u0430\u043c')", "\u0410\u0441\u0442\u0440\u043e\u0438\u0434\u0430": "\nimport math\n\n\ndef dist(t):\n    return ((0.7500 - t[0]) ** 2 + (0 - t[1]) ** 2) ** 0.5\n\n\nk = []\nfor j in range(0, int(2 * math.pi) * 100, 1):\n    k.append(j)\n\ncords = [(math.cos(t) * math.cos(t) * math.cos(t), \n          math.sin(t) * math.sin(t) * math.sin(t)) for t in k]\n\ndists = [dist(x) for x in cords]\nprint(int(min(dists) * 10000) / 10000)", "\u0412\u0441\u0435 \u0440\u0430\u0432\u043d\u044b, \u043a\u0430\u043a \u043d\u0430 \u043f\u043e\u0434\u0431\u043e\u0440": "\ndef same_by(characteristic, objects):\n    if objects:\n        return len(set(map(characteristic, objects))) == 1 \n    return True\n", "\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438": "\ndef print_operation_table(operation, num_rows=9, num_columns=9):\n    for x in range(1, num_rows + 1):\n        for y in range(1, num_columns + 1):\n            print(operation(x, y), end='\t')\n        print()\n\u0432 4 \u0441\u0442\u0440\u043e\u0447\u043a\u0435 end='\\ t' ", "\u041f\u0435\u0447\u0430\u0442\u044c \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435": "\np = print\n\n\ndef print(*x):\n    for elem in x:\n        p(elem.upper(), end=' ')\n", "\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438": "\ndef fib(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef check_password():\n    etalon = '[eq'\n    f = input('\u041f\u0430\u0440\u043e\u043b\u044c:')\n    if f != etalon:\n        print('\u0412 \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043e')\n        return None\n    fib(int(input()))", "\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432": "\ndef check_password(password):\n    def wrapper(func):\n        def wrap(*args, **kwargs):\n            if input('\u043f\u0430\u0440\u043e\u043b\u044c: ') != password:\n                print('\u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c')\n                return\n            return func(*args, **kwargs)\n\n        return wrap", "\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f": "\ndef cached(func):\n    cache = {}\n\n    def a(*args, **kwargs):\n        if not cache.get(args):\n            g = func(*args, **kwargs)\n            cache[args] = g\n            return g\n        return cache[args]\n    return a", "\u0421\u043b\u043e\u0432\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a": "\ns = input().split()\nprint(*sorted(s, key=lambda word: word.lower()))", "\u041e\u0442\u043b\u0438\u0447\u043d\u0438\u043a\u0438": "\nn = int(input())\nd = []\nfor i in range(n):\n    m = []\n    for j in range(int(input())):\n        s = input().split()[1]\n        if int(s) != 5:\n            m.append(False)\n        else:\n            m.append(True)\n    d.append(1 if any(m) else 0)\n\nprint('\u0414\u0410' if all(d) else '\u041d\u0415\u0422')", "\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u043e\u0441\u0442": "\nimport sys\n\nmap_l = map(lambda elem: float(elem.rstrip('\n')), sys.stdin.readlines())\nc = 0\ncum = 0\nfor elem in map_l:\n    c += 1\n    cum += elem\nif c != 0:\n    print(cum / c)\nelse:\n    print(-1)", "\u0412\u0430\u0448\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438": "\nimport sys\ncouu = 0\nfor line in sys.stdin:\n    if line.lstrip() != '':\n        if line.lstrip()[0] == '#':\n            couu += 1\n\nprint(couu)", "\u0415\u0441\u0442\u044c \u043b\u0438 0": "\nimport sys\nprint(not all(list(map(int, sys.stdin.read().split()))))", "\u0413\u0435\u043c\u0430\u0442\u0440\u0438\u044f \u043f\u043e-\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438": "\nimport sys\n\ndick = {}\ndata = list(map(str.strip, sys.stdin))\nfor elem in data:\n    c = 0\n    for bukva in elem:\n        c += ord(bukva.upper()) - ord('A') + 1\n    if c not in dick.keys():\n        dick[c] = elem\n    else:\n        dick[c] = dick[c] + ' ' + elem\n        dick[c] = ' '.join(sorted(dick[c].split()))\n\nkey = sorted(dick.keys())\nfor k in key:\n    j = dick[k].split()\n    for ee in j:\n        print(ee)", "\u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438": "\nimport sys\n\ndata = list(map(str.strip, sys.stdin))\ndata = [s.strip() for s in data]\ncoment = list(filter(lambda word: word[0] == '#', data))\nfor e in coment:\n    print(f'Line {data.index(e) + 1}: {e[1:].strip()}')", "\u041e\u0445 \u0443\u0436 \u044d\u0442\u0438 \u0430\u043d\u0430\u0433\u0440\u0430\u043c\u043c\u044b": "\ndic = {}\nn = int(input())\nfor i in range(n):\n    e = input().lower()\n    s = ''.join(sorted(e))\n    dic[s] = dic.get(s, set())\n    dic[s].add(e)\nnew_words = [' '.join(sorted(i)) for i in dic.values() if len(i) > 1]\nprint('\n'.join(sorted(new_words)))\n\u0432 \u043f\u0440\u0438\u043d\u0442\u0435 \\ n", "\u0414\u043b\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0430": "\ndef recursive_len(some_list):\n    if some_list == []:\n        return 0\n    return 1 + (recursive_len(some_list[:-1]))\n", "\u043a\u043e\u0441\u0438\u043f\u0441 \u044c\u0442\u0443\u043d\u0440\u0435\u0432\u0435\u0440\u0435\u041f": "\ndef recursive_reverse(c, i=0):\n    if i >= len(c) // 2:\n        return c\n    c[i], c[len(c) - i - 1] = c[len(c) - i - 1], c[i]\n    return recursive_reverse(c, i + 1)", "\u0422\u0440\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438": "\ndef tribonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n > 3:\n        return tribonacci(n - 3) + tribonacci(n - 2) + tribonacci(n - 1)", "\u0421\u0443\u043c\u043c\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430": "\ndef rec_linear_sum(some_list, i=0):\n    if len(some_list) == 0:\n        return 0\n    if i == len(some_list) - 1:\n        return some_list[i]\n    return some_list[i] + rec_linear_sum(some_list, i + 1)", "\u041b\u0438\u043d\u0435\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430": "\ndef linear(some_list):\n    if not some_list:\n        return some_list\n    if type(some_list[0]) is list:\n        return linear(some_list[0]) + linear(some_list[1:])\n    return some_list[:1] + linear(some_list[1:])", "\u041c\u0438\u043d\u0438-\u0441\u0443\u0434\u043e\u043a\u0443": "\nfrom random import shuffle\nfrom copy import deepcopy\n\n\ndef make_assumptions(sudoku):\n    for i, row in enumerate(sudoku):\n        for j, value in enumerate(row):\n            if not value:\n                values = set(row)                     | set([sudoku[k][j] for k in range(4)])                     | set([sudoku[m][n] for m in range((i // 2) * 2, (i // 2) * 2 + 2) \n                           for n in range((j // 2) * 2, (j // 2) * 2 + 2)])\n                yield i, j, list(set(range(1, 5)) - values)\n\n\ndef solve_sudoku(sudoku):\n    if all([k for row in sudoku for k in row]):\n        return sudoku\n    assumptions = list(make_assumptions(sudoku))\n    shuffle(assumptions)\n\n    x, y, values = min(assumptions, key=lambda x: len(x[2]))\n\n    for v in values:\n        new_sudoku = deepcopy(sudoku)\n        new_sudoku[x][y] = v\n        s = solve_sudoku(new_sudoku)\n        if s:\n            return s\n    return None\n\n\nsudoku = [[int(n) for n in input().split()[0]] for _ in range(4)]\nfor string in solve_sudoku(sudoku):\n    print(\"\".join(map(str, string)))", "\u041f\u043e\u043b\u0443\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442": "\nimport sys\n\nmatrix = []\nfor line in sys.stdin:\n    line = line.rstrip('\n')\n    matrix.append(list(map(int, line.split())))\n\nif all([sum(elem) == sum(matrix[0]) for elem in matrix]) and all([sum(elem_) == sum(matrix[0]) for elem_ in list(zip(*matrix))]):\n    print('YES')\nelse:\n    print('NO')\n\u0432 \u043f\u044f\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \\ n", "\u041a\u043e\u043b\u043e\u0434\u0430 \u043a\u0430\u0440\u0442": "\n\ndelete = input()\n\nsus = ['\u043f\u0438\u043a', '\u0442\u0440\u0435\u0444', '\u0431\u0443\u0431\u0435\u043d', '\u0447\u0435\u0440\u0432\u0435\u0439']\nmast = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '\u0432\u0430\u043b\u0435\u0442', '\u0434\u0430\u043c\u0430', '\u043a\u043e\u0440\u043e\u043b\u044c', '\u0442\u0443\u0437']\n\nfor elem in mast:\n    for s in sus:\n        if s == delete:\n            continue\n        else:\n            print(elem, s)", "\u0414\u0438\u0441\u043b\u0435\u043a\u0441\u0438\u044f": "\ndict = input().lower().split()\nd = dict\ndict = [sorted(elem) for elem in dict]\ndict = [''.join(elem) for elem in dict]\nres = []\ntext = input().lower().split()\nfor i in range(len(text)):\n\n    if any([sorted(list(text[i])) == sorted(list(w)) and text[i] != w for w in d]):\n        if \"\".join(sorted(list(text[i]))) in dict:\n            res.append('#' * len(text[i]))\n        else:\n            res.append(text[i])\n    else:\n        res.append(text[i])\nprint(*res)", "\u0421\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0443": "\nimport sys\nfrom functools import reduce\n\n\ndata = [i.replace(\"/n\", \"\") for i in map(str.strip, sys.stdin)]\nprint(reduce(lambda x, y: sorted([x, y])[0], data))", "\u0411\u0438\u043d\u0433\u043e!": "\nimport random\n\n\ndef make_bingo():\n    x = random.sample(range(1, 100), 24)\n    x.insert(12, 0) \n    return tuple(tuple(x[i:(i + 5)]) for i in [0, 5, 10, 15, 20])", "\u0412\u044b\u0431\u043e\u0440 \u0442\u0430\u0439\u043d\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430": "\nimport random\nimport sys\n\nnames = list(map(str.strip, sys.stdin))\nres = names.copy()\n\n\nwhile True:\n    random.shuffle(res)\n    flag = True\n    for i in range(len(res)):\n        if res[i] == names[i]:\n            flag = False\n    if flag:\n        break\n\nfor i in range(len(res)):\n    print(f'{names[i]} - {res[i]}')", "\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u043c\u044b\u0445 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439)": "\nimport random\net = '23456789qwertyuipasdfghjkzxcvbnmQWERTYUPASDFGHJKLZXCVBNM'\n\n\ndef generate_password(m):\n    password = ''\n    for i in range(m):\n        password += et[random.randint(0, 55)]\n    return password\n\n\ndef main(n, m):\n    mm = []\n    for i in range(n):\n        pas = generate_password(m)\n        while pas in mm:\n            pas = generate_password(m)\n        mm.append(pas)\n    return mm", "\u0414\u043d\u0438 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0437\u0435\u0439": "\nimport datetime as dt\n\ndays = int(input())\nnow = dt.datetime.today()\ndelta = dt.timedelta(days=days)\nresult = now + delta\nprint(result.day, result.month)", "\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u043c\u044b\u0445 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 (A)": "\nimport random\net = '23456789qwertyuipasdfghjkzxcvbnmQWERTYUPASDFGHJKLZXCVBNM'\n\n\ndef generate_password(m):\n    password = ''\n    jopa = []\n    for i in range(m):\n        ff = et[random.randint(0, 55)]\n        while ff in jopa:\n            ff = et[random.randint(0, 55)]\n        password += ff\n        jopa.append(ff)\n    return password\n\n\ndef main(n, m):\n    mm = []\n    for i in range(n):\n        pas = generate_password(m)\n        while pas in mm:\n            pas = generate_password(m)\n        mm.append(pas)\n    return mm", "\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u043c\u044b\u0445 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 (B)": "\nimport random\n\nst1 = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'p', 'a', 's', 'd', 'f', 'g',\n       'h', 'j', 'k', 'z', 'x', 'c', 'v', 'b', 'n', 'm']\nst2 = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'P', 'A', 'S', 'D', 'F', 'G', 'H',\n       'J', 'K', 'L', 'Z', 'X', 'C', 'V', 'B', 'N', 'M']\nst3 = ['2', '3', '4', '5', '6', '7', '8', '9']\nst4 = st1 + st2 + st3\n\n\ndef generate_password(m):\n    pas = []\n    pas.append(random.choice(st1))\n    pas.append(random.choice(st2))\n    pas.append(random.choice(st3))\n    for i in range(0, m - 3):\n        pas.append(random.choice(st4))\n    random.shuffle(pas)\n    return ''.join(pas)\n\n\ndef main(n, m):\n    list_passw = set()\n    while len(list_passw) < n:\n        list_passw.add(generate_password(m))\n    return list_passw", "\u0411\u0438\u043e\u0440\u0438\u0442\u043c\u044b": "\nimport datetime as dt\nimport math\n\na1 = list(map(int, input().split('.')))\ndate1 = dt.date(a1[2], a1[1], a1[0])\nb1 = list(map(int, input().split('.')))\ndate2 = dt.date(b1[2], b1[1], b1[0])\n\nt = (date2 - date1).days\n\n\ndef snus(t, p):\n    return round(math.sin((2 * math.pi * t) / p) * 100, 2)\n\n\nprint(snus(t, 23))\nprint(snus(t, 28))\nprint(snus(t, 33))", "\u041d\u0430\u0439\u0442\u0438 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0451\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u041f\u0438": "\nimport random\n\n\nk = 0\nfor i in range(1000000):\n    k += (random.random() ** 2 + random.random() ** 2 < 1)\nprint(4 * k / 1000000)", "\u041f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u044b\u0439 \u0446\u0432\u0435\u0442 (\u0440\u0430\u0437\u043c\u0438\u043d\u043a\u0430)": "\nprint(*(list(map(lambda x: 255 - x, list(map(int, input().split()))))))", "\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0446\u0432\u0435\u0442 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438": "\nfrom PIL import Image\n\nim = Image.open(\"image.jpg\")\npixels = im.load()\nx, y = im.size\nsrr = 0\nsrg = 0\nsrb = 0\n\nfor i in range(x):\n    for j in range(y):\n        r, g, b = pixels[i, j]\n        srr += r\n        srg += g\n        srb += b\n\nprint(srr // (x * y), srg // (x * y), srb // (x * y), end=' ')", "\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435": "\nfrom PIL import Image\n\n\ndef mirror():\n    im = Image.open(\"image.jpg\")\n    pixels = im.load()\n    x, y = im.size\n    for i in range(x // 2):\n        for j in range(y):\n            pixels[i, j], pixels[x - 1 - i, j] = pixels[x - 1 - i, j], pixels[i, j]\n    im.save(\"res.jpg\")", "\u0414\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u0442\u0440\u0430\u0436\u0435\u043d\u0438\u0435": "\nfrom PIL import Image\n\n\ndef mirror():\n    im = Image.open(\"image.jpg\")\n    x, y = im.size\n    im = im.rotate(90)\n    im = im.transpose(Image.FLIP_LEFT_RIGHT)\n    im.save(\"res.jpg\")", "\u0420\u0438\u0441\u0443\u0435\u043c \u043f\u0430\u0440\u0443\u0441\u043d\u0438\u043a": "\nfrom PIL import Image, ImageDraw\n\n\ndef picture(file_name, width, height,\n            sky_color='#87CEEB',\n            ocean_color='#017B92',\n            boat_color='#874535',\n            sail_color='#FFFFFF',\n            sun_color='#FFCF40'):\n    im = Image.new('RGB', (width, height), sky_color)\n    draw = ImageDraw.Draw(im)\n    draw.rectangle(((0, int(height * 0.8)), (width - 1, height - 1)), ocean_color)\n\n    draw.polygon(((int(width * 0.25), int(height * 0.65)),\n                 (int(width * 0.75), int(height * 0.65)),\n                 (int(width * 0.7), int(height * 0.85)),\n                 (int(width * 0.3), int(height * 0.85))), boat_color)\n\n    draw.rectangle(((int(0.49 * width), int(height * 0.3)), (int(0.51 * width), int(height * 0.65))), boat_color)\n\n    draw.polygon(((int(0.51 * width), int(height * 0.3)),\n                  (int(0.66 * width), int(height * 0.45)),\n                  (int(0.51 * width), int(height * 0.6))),\n                 sail_color)\n\n    draw.ellipse((\n        (int(0.8 * width), -int(0.2 * height)),\n        (int(1.2 * width), int(0.2 * height))),\n        sun_color)\n\n    im.save(file_name)", "\u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442": "\nfrom PIL import Image, ImageDraw\n\n\ndef gradient(color):\n    new_image = Image.new(\"RGB\", (512, 200), (0, 0, 0))\n    draw = ImageDraw.Draw(new_image)\n    n = 0\n    for i in range(0, 512, 2):\n        if color.lower() == 'r':\n            draw.line((i, 0, i, 200), (n, 0, 0))\n            draw.line((i + 1, 0, i + 1, 200), (n, 0, 0))\n\n        elif color.lower() == 'g':\n            draw.line((i, 0, i, 200), (0, n, 0))\n            draw.line((i + 1, 0, i + 1, 200), (0, n, 0))\n\n        elif color.lower() == 'b':\n            draw.line((i, 0, i, 200), (0, 0, n))\n            draw.line((i + 1, 0, i + 1, 200), (0, 0, n))\n\n        n += 1\n\n    new_image.save(\"res.png\")", "\u0428\u0430\u0445\u043c\u0430\u0442\u043d\u0430\u044f \u0434\u043e\u0441\u043a\u0430": "\nfrom PIL import Image, ImageDraw\n\n\ndef board(num, size):\n    black_fat_cock = (0, 0, 0)\n    while_small_dick = (255, 255, 255)\n    im = Image.new(\"RGB\", (num * size, num * size), while_small_dick)\n    draw = ImageDraw.Draw(im)\n    for i in range(0, num * size, size):\n        if i % (size * 2) == 0:\n            for j in range(0, num * size, size):\n                if j % (size * 2) == 0:\n                    draw.rectangle([i, j, i + size - 1, j + size - 1], black_fat_cock)\n        else:\n            for j in range(size, size * num, size):\n                if j % (size * 2) != 0:\n                    draw.rectangle([i, j, i + size - 1, j + size - 1], black_fat_cock)\n    im.save(\"res.png\", \"PNG\")", "\u0420\u0438\u0441\u0443\u0435\u043c \u0451\u043b\u043e\u0447\u043a\u0443": "\nfrom PIL import Image, ImageDraw\n\n\ndef picture(file_name, width, height, sky_color='#75BBFD', snow_color='#FFFAFA',\n            trunk_color='#A45A52', needls_color='#01796F', sun_color='#FFDB00'):\n    im = Image.new('RGB', (width, height))\n    drawer = ImageDraw.Draw(im)\n    drawer.rectangle(((0, 0), (width, 0.8 * height)), sky_color)\n    drawer.rectangle(((0, 0.8 * height), (width, height)),\n                     snow_color)\n    drawer.ellipse((\n        (int(0.8 * width), -int(0.2 * height)),\n        (int(1.2 * width), int(0.2 * height))),\n        sun_color)\n\n    drawer.rectangle(((width * 0.45, height * 0.7), (width * 0.55, height * 0.9)), trunk_color)\n\n    drawer.polygon(((width * 0.4, height * 0.3),\n                    (width * 0.5, height * 0.1),\n                    (width * 0.6, height * 0.3)),\n                   needls_color)\n\n    drawer.polygon(((width * 0.35, height * 0.5),\n                    (width * 0.45, height * 0.3),\n                    (width * 0.55, height * 0.3),\n                    width * 0.65, height * 0.5),\n                   needls_color)\n    drawer.polygon(((width * 0.3, height * 0.7),\n                    (width * 0.4, height * 0.5),\n                    (width * 0.6, height * 0.5),\n                    width * 0.7, height * 0.7),\n                   needls_color)\n\n    im.save(file_name)", "\u0421\u0442\u0435\u0440\u0435\u043e\u043f\u0430\u0440\u0430": "\nfrom PIL import Image\n\n\ndef makeanagliph(filename, delta):\n    im = Image.open(filename)\n    x, y = im.size\n    im_2 = Image.new('RGB', (x, y), (0, 0, 0))\n    pi_2 = im_2.load()\n    pi_1 = im.load()\n    for i in range(x):\n        for j in range(y):\n            if i < delta:\n                r, g, b = pi_1[i, j]\n                pi_2[i, j] = 0, g, b\n            else:\n                g, b = pi_1[i, j][1:]\n                r = pi_1[i - delta, j][0]\n                pi_2[i, j] = r, g, b\n\n    im_2.save(\"res.jpg\")", "\u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0438\u043a\u0441\u0435\u0440": "\nfrom PIL import Image\n\n\ndef twist_image(input_file_name, output_file_name):\n    im = Image.open(input_file_name)\n    pixels = im.load()\n    x, y = im.size\n    for j in range(y):\n        for i in range(x // 2):\n            pixels[i, j], pixels[x // 2 + i, j] = pixels[x // 2 + i, j], pixels[i, j]\n    im.save(output_file_name)", "\u041f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c": "\nfrom PIL import Image, ImageDraw\n\n\ndef transparency(filename1, filename2):\n\n    input_im1 = Image.open(filename1)\n    input_im2 = Image.open(filename2)\n    pixels1 = input_im1.load()\n    x1, y1 = input_im1.size\n\n    input_im2.resize((x1, y1))\n\n    pixels2 = input_im2.load()\n    x2, y2 = input_im2.size\n\n    result = Image.new(\"RGB\", (x1, y1), (0, 0, 0))\n    pixels_result = result.load()\n    xr, yr = result.size\n\n    for i in range(xr):\n        for j in range(yr):\n\n            r1, g1, b1 = pixels1[i, j]\n            r2, g2, b2 = pixels2[i, j]\n\n            rr = int(0.5 * r1 + 0.5 * r2)\n            gr = int(0.5 * g1 + 0.5 * g2)\n            br = int(0.5 * b1 + 0.5 * b2)\n            pixels_result[i, j] = rr, gr, br\n\n    result.save('res.jpg')", "\u0427\u0438\u043f \u0438 \u0414\u0435\u0439\u043b": "\nimport wave\nimport struct\n\n\ndef chip_and_dale(number):\n    source = wave.open(\"in.wav\", mode=\"rb\")\n    dest = wave.open(\"out.wav\", mode=\"wb\")\n    dest.setparams(source.getparams())\n    frames_count = source.getnframes()\n    data = struct.unpack(\"<\" + str(frames_count) + \"h\",\n                         source.readframes(frames_count))\n\n    newdata = []\n\n    for i in range(0, len(data), number):\n        newdata.append(data[i])\n\n    newframes = struct.pack(\"<\" + str(len(newdata)) + \"h\", *newdata)\n    dest. writeframes(newframes)\n    source.close()\n    dest.close()", "\u041f\u043e\u0432\u043e\u0440\u043e\u0442 \u0441 \u0440\u0430\u0437\u043c\u044b\u0442\u0438\u0435\u043c": "\nfrom PIL import Image, ImageFilter\n\n\ndef motion_blur(n):\n    im = Image.open(\"image.jpg\")\n    im = im.transpose(Image.ROTATE_270)\n    im = im.filter(ImageFilter.GaussianBlur(radius=n))\n    im.save(\"res.jpg\")", "\u0423\u0431\u0440\u0430\u0442\u044c \u0442\u0438\u0448\u0438\u043d\u0443": "\nimport wave\nimport struct\n\n\ndef break_the_silence():\n    source = wave.open(\"in.wav\", mode=\"rb\")\n    dest = wave.open(\"out.wav\", mode=\"wb\")\n    dest.setparams(source.getparams())\n    frames_count = source.getnframes()\n    data = struct.unpack(\"<\" + str(frames_count) + \"h\",\n                         source.readframes(frames_count))\n    newdata = list(filter(lambda x: abs(x) > 5, data))\n    newframes = struct.pack(\"<\" + str(len(newdata)) + \"h\", *newdata)\n    dest.writeframes(newframes)\n    source.close()\n    dest.close()", "\u041c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u0430 \u0434\u043b\u044f \u0441\u0430\u0439\u0442\u0430": "\nfrom PIL import Image\n\n\ndef make_preview(size, n_colors):\n    im = Image.open('image.jpg')\n    im = im.resize(size)\n    im = im.quantize(n_colors)\n    im.save('res.bmp')", "\u041a\u0440\u0443\u0447\u0443-\u0432\u0435\u0440\u0447\u0443": "\nimport wave\nimport struct\n\n\ndef pitch_and_toss():\n    source = wave.open(\"in.wav\", mode=\"rb\")\n    dest = wave.open(\"out.wav\", mode=\"wb\")\n    dest.setparams(source.getparams())\n    frames_count = source.getnframes()\n    data = struct.unpack(\"<\" + str(frames_count) + \"h\",\n                         source.readframes(frames_count))\n    newdata = [data[:len(data) // 4], data[len(data) // 4: len(data) // 4 * 2],\n               data[len(data) // 4 * 2:len(data) // 4 * 3], data[len(data) // 4 * 3:]]\n    newdata = list(newdata[2]) + list(newdata[3]) + list(newdata[0]) + list(newdata[1])\n    newframes = struct.pack('<' + str(len(newdata)) + 'h', *newdata)\n    dest.writeframes(newframes)\n    source.close()\n    dest.close()", "\u0424\u043e\u0440\u043c\u044b \u0433\u043b\u0430\u0433\u043e\u043b\u043e\u0432": "\nimport pymorphy2\nimport sys\n\ng = sys.stdin.readlines()\ndata = map(lambda x: x.strip(), g)\ntemp_data = ''\nfor line in data:\n    for alpha in line:\n        if alpha.isalpha():\n            temp_data += alpha\n        else:\n            temp_data += ' '\n    temp_data += ' '\n\nmorph = pymorphy2.MorphAnalyzer()\nfinish_data = temp_data.lower().split()\n\ncounter = 0\nfor elem in finish_data:\n    if morph.parse(elem)[0].normal_form.lower() in {'\u0432\u0438\u0434\u0435\u0442\u044c', '\u0443\u0432\u0438\u0434\u0435\u0442\u044c', '\u0433\u043b\u044f\u0434\u0435\u0442\u044c', '\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u044c', '\u0443\u0437\u0440\u0435\u0442\u044c'}:\n        counter += 1\n\n\nprint(counter)", "\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435": "\nimport pymorphy2\nimport sys\n\n\ndata = map(lambda x: x.strip(), sys.stdin.readlines())\ntemp_data = ''\nfor line in data:\n    for alpha in line:\n        if alpha.isalpha():\n            temp_data += alpha\n        else:\n            temp_data += ' '\n    temp_data += ' '\n\nmorph = pymorphy2.MorphAnalyzer()\nfinish_data = temp_data.lower().split()\ndic_data = {}\nfor word in finish_data:\n    res = morph.parse(word)[0]\n    if res.score > 0.5:\n        if \"NOUN\" in res.tag:\n            if res.normal_form not in dic_data.keys():\n                dic_data[res.normal_form] = 0\n            dic_data[res.normal_form] += 1\n\nresult = [elem[1] for elem in sorted([(counter, word) for word, counter in dic_data.items()], reverse=True)[:10]]\n\nprint(*result)", "99 \u0431\u0443\u0442\u044b\u043b\u043e\u043a \u043a\u0432\u0430\u0441\u0430": "\nimport pymorphy2\n\ns = pymorphy2.MorphAnalyzer().parse('\u0431\u0443\u0442\u044b\u043b\u043a\u0430')[0]\n\nfor i in range(99, 0, - 1):\n    print('\u0412 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u0435', i, s.make_agree_with_number(i).word, '\u043a\u0432\u0430\u0441\u0430.')\n    print('\u0412\u043e\u0437\u044c\u043c\u0451\u043c \u043e\u0434\u043d\u0443 \u0438 \u0432\u044b\u043f\u044c\u0435\u043c.')\n    i -= 1\n    if i != 11 and i % 10 == 1:\n        kk = '\u041e\u0441\u0442\u0430\u043b\u0430\u0441\u044c'\n    else:\n        kk = '\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c'\n    print(kk, i, s.make_agree_with_number(i).word, '\u043a\u0432\u0430\u0441\u0430.')", "\u0421\u043a\u043b\u043e\u043d\u044f\u0439 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e": "\nimport pymorphy2\n\n\nmorph = pymorphy2.MorphAnalyzer()\na = input()\nres = morph.parse(a)[0]\nif 'NOUN' in res.tag.POS:\n    print('\u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e:')\n    print('\u0418\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'nomn'}).word)\n    print('\u0420\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'gent'}).word)\n    print('\u0414\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'datv'}).word)\n    print('\u0412\u0438\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'accs'}).word)\n    print('\u0422\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'ablt'}).word)\n    print('\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'loct'}).word)\n    print('\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e:')\n    print('\u0418\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'nomn', 'plur'}).word)\n    print('\u0420\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'gent', 'plur'}).word)\n    print('\u0414\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'datv', 'plur'}).word)\n    print('\u0412\u0438\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'accs', 'plur'}).word)\n    print('\u0422\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'ablt', 'plur'}).word)\n    print('\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0430\u0434\u0435\u0436:', res.inflect({'loct', 'plur'}).word)\nelse:\n    print('\u041d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435')", "\u0421\u043f\u0440\u044f\u0433\u0430\u0439 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e": "\nimport pymorphy2\n\n\nmorph = pymorphy2.MorphAnalyzer()\na = input()\nres = morph.parse(a)[0]\nif 'VERB' in res.tag.POS or 'INFN' in res.tag.POS:\n    print('\u041f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f:')\n    print(res.inflect({'past', 'VERB', 'masc'}).word)\n    print(res.inflect({'past', 'VERB', 'femn'}).word)\n    print(res.inflect({'past', 'VERB', 'neut'}).word)\n    print(res.inflect({'past', 'VERB', 'plur'}).word)\n\n    print('\u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f:')\n    print(res.inflect({'pres', 'VERB', '1per', 'sing'}).word)\n    print(res.inflect({'pres', 'VERB', '1per', 'plur'}).word)\n    print(res.inflect({'pres', 'VERB', '2per', 'sing'}).word)\n    print(res.inflect({'pres', 'VERB', '2per', 'plur'}).word)\n    print(res.inflect({'pres', 'VERB', '3per', 'sing'}).word)\n    print(res.inflect({'pres', 'VERB', '3per', 'plur'}).word)\nelse:\n    print('\u041d\u0435 \u0433\u043b\u0430\u0433\u043e\u043b')", "\u041e\u043d\u043e \u0436\u0438\u0432\u043e\u0435!": "\nimport sys\nimport pymorphy2\n\ndata = map(lambda x: x.strip(), sys.stdin.readlines())\n\nmorph = pymorphy2.MorphAnalyzer()\nfor elem in data:\n    res = morph.parse(elem)[0]\n    if 'NOUN' in res.tag:\n        if 'anim' in res.tag:\n            if 'plur' in res.tag:\n                print('\u0416\u0438\u0432\u044b\u0435')\n            elif 'masc' in res.tag:\n                print('\u0416\u0438\u0432\u043e\u0439')\n            elif 'femn' in res.tag:\n                print('\u0416\u0438\u0432\u0430\u044f')\n        else:\n            if 'plur' in res.tag:\n                print('\u041d\u0435 \u0436\u0438\u0432\u044b\u0435')\n            elif 'masc' in res.tag:\n                print('\u041d\u0435 \u0436\u0438\u0432\u043e\u0439')\n            elif 'femn' in res.tag:\n                print('\u041d\u0435 \u0436\u0438\u0432\u0430\u044f')\n            elif 'neut' in res.tag:\n                print('\u041d\u0435 \u0436\u0438\u0432\u043e\u0435')\n    else:\n        print('\u041d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435')", "\u041f\u0440\u0438\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044f": "\nfrom docx import Document\nimport sys\n\nplace = input()\ntime = input()\ndata = list(map(lambda elem: elem.strip(), sys.stdin.readlines()))\ndocument = Document()\n\n\nfor elem in data:\n    p = document.add_heading('\u0421\u0430\u043b\u0430\u043c \u0410\u043b\u0435\u0439\u043a\u0443\u043c!')\n    p = document.add_paragraph('\u041f\u0440\u0438\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0445\u043e\u0434\u0443 \n \u043c\u0435\u0441\u0442\u043e: ' + str(place))\n    p = document.add_paragraph('\u0412\u0440\u0435\u043c\u044f: ' + str(time)).italic = True\n    p = document.add_paragraph('\u0438\u043c\u044f: ' + str(elem))\n    document.save(str(elem) + '.docx')", "\u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f": "\nfrom pptx import Presentation\n\nprs = Presentation()\n\ntitle_slide_layout = prs.slide_layouts[0]\nslide = prs.slides.add_slide(title_slide_layout)\ntitle = slide.shapes.title\nsubtitle = slide.placeholders[1]\ntitle.text = \"Random.seed\"\nsubtitle.text = \"Random.seed([X], version=2) - \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\"                 \" \u0415\u0441\u043b\u0438 X \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f.\"\n\ntitle_slide_layout1 = prs.slide_layouts[0]\nslide1 = prs.slides.add_slide(title_slide_layout)\ntitle1 = slide1.shapes.title\nsubtitle1 = slide1.placeholders[1]\ntitle1.text = \"Random.shuffle\"\nsubtitle1.text = \"Random.shuffle(sequence, [rand]) - \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\"                  \" (\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c).\"                  \" \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043b\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.\"\n\ntitle_slide_layout2 = prs.slide_layouts[0]\nslide2 = prs.slides.add_slide(title_slide_layout)\ntitle2 = slide2.shapes.title\nsubtitle2 = slide2.placeholders[1]\ntitle2.text = \"Random.expovariate\"\nsubtitle2.text = \"Random.expovariate(lambd) - \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435. \"                  \"lambd \u0440\u0430\u0432\u0435\u043d 1/\u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0435.\"                  \" Lambd \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c \u043e\u0442 \u043d\u0443\u043b\u044f. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 0\"                  \" \u0434\u043e \u043f\u043b\u044e\u0441 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438, \u0435\u0441\u043b\u0438 lambd \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0438 \u043e\u0442 \u043c\u0438\u043d\u0443\u0441\"                  \" \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u043e 0, \u0435\u0441\u043b\u0438 lambd \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439.\"\n\ntitle_slide_layout3 = prs.slide_layouts[0]\nslide3 = prs.slides.add_slide(title_slide_layout)\ntitle3 = slide3.shapes.title\nsubtitle3 = slide3.placeholders[1]\ntitle3.text = \"Random.lognormvariate\"\nsubtitle3.text = \"Random.lognormvariate(mu, sigma) - \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f.\"                  \" \u0415\u0441\u043b\u0438 \u0432\u0437\u044f\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c \u044d\u0442\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f,\"                  \" \u0442\u043e \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435\"                  \" \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u043c mu \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\u043c sigma.\"                  \" mu \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435,\"                  \" \u0438 sigma \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f.\"\n\ntitle_slide_layout4 = prs.slide_layouts[0]\nslide4 = prs.slides.add_slide(title_slide_layout)\ntitle4 = slide4.shapes.title\nsubtitle4 = slide4.placeholders[1]\ntitle4.text = \"Random.vonmisesvariate\"\nsubtitle4.text = \"Random.vonmisesvariate(mu, kappa) - mu - \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0443\u0433\u043e\u043b,\"                  \" \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u0432 \u0440\u0430\u0434\u0438\u0430\u043d\u0430\u0445 \u043e\u0442 0 \u0434\u043e 2\u03c0,\"                  \" \u0438 kappa - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043a\u043e\u043d\u0446\u0435\u043d\u0442\u0440\u0430\u0446\u0438\u0438,\"                  \" \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e.\"                  \" \u0415\u0441\u043b\u0438 \u043a\u0430\u043f\u043f\u0430 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e,\"                  \" \u044d\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c\u0443 \u0443\u0433\u043b\u0443 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 0 \u0434\u043e 2\u03c0.\"\n\nprs.save('test.pptx')", "\u0423\u0447\u0435\u0431\u043d\u0430\u044f \u0432\u0435\u0434\u043e\u043c\u043e\u0441\u0442\u044c": "\nimport docxtpl\n\n\ndef create_training_sheet(class_name, subject_name, tpl_name, *marks):\n    d = docxtpl.DocxTemplate(tpl_name)\n    marks = sorted(marks, key=lambda x: x[0])\n    table = {'class_name': class_name,\n             'subject_name': subject_name,\n             'marks': [{'num': i + 1, 'fio': marks[i][0], 'mark': marks[i][1]}\n                       for i in range(len(marks))]}\n    d.render(table)\n    d.save(\"res.docx\")", "\u041a\u0440\u0443\u0433\u043e\u0432\u0430\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430": "\nimport xlsxwriter\n\n\nworkbook = xlsxwriter.Workbook('res.xlsx')\nworksheet = workbook.add_worksheet()\n\ndata = [('\u041f\u0438\u0442\u0430\u043d\u0438\u0435', 1200), ('\u0420\u0430\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f', 1500), ('\u0423\u0447\u0435\u0431\u0430', 300), ('\u041b\u0435\u0447\u0435\u043d\u0438\u0435', 100), ('\u041f\u0440\u043e\u0447\u0435\u0435', 670)]\n\nfor row, (item, price) in enumerate(data):\n    worksheet.write(row, 0, item)\n    worksheet.write(row, 1, price)\n    chart = workbook.add_chart({'type': 'pie'})\n    chart.add_series({'values': '=Sheet1!B1:B5'})\n    worksheet.insert_chart('C3', chart)\n    chart.add_series({\n        'categories': '=Sheet1!A1:A5',\n        'values': '=Sheet1!B1:B5',\n    })\nworkbook.close()", "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0432 \u0434\u043e\u0440\u043e\u0433\u0443": "\nfrom docx import Document\n\n\ndef markdown_to_docx(text):\n    document = Document()\n    lines = text.split('\n')\n    document.add_heading(lines[0], 0)\n    for line in lines[1:]:\n        if line:\n            if line[:7].count('#') == 1:\n                document.add_heading(line[2:], level=1)\n            elif line[:7].count('#') == 2:\n                document.add_heading(line[3:], level=2)\n            elif line[:7].count('#') == 3:\n                document.add_heading(line[4:], level=3)\n            elif line[:7].count('#') == 4:\n                document.add_heading(line[5:], level=4)\n            elif line[:7].count('#') == 5:\n                document.add_heading(line[6:], level=5)\n            elif line[:7].count('#') == 6:\n                document.add_heading(line[7:], level=6)\n            elif str(line[:2]) == '- ':\n                document.add_paragraph(line[2:], style='List Bullet')\n            elif str(line[:2]) == '* ':\n                document.add_paragraph(line[2:], style='List Bullet')\n            elif str(line[:2]) == '+ ':\n                document.add_paragraph(line[2:], style='List Bullet')\n            elif line[0].isdigit() and line[1] == '.':\n                document.add_paragraph(line[3:], style='List Number')\n            elif line[:3].count('_') == 1 or line[:3].count('*') == 1:\n                document.add_paragraph().add_run(line[1:-1]).italic = True\n            elif line[:3].count('_') == 2 or line[:3].count('*') == 2:\n                document.add_paragraph().add_run(line[2:-2]).bold = True\n            elif line[:3].count('_') == 3 or line[:3].count('*') == 3:\n                runner = document.add_paragraph().add_run(line[3:-3])\n                runner.bold = True\n                runner.italic = True\n            else:\n                document.add_paragraph(line)\n        else:\n            document.add_paragraph()\n    document.save('res.docx')", "\u0427\u0435\u043a": "\nimport xlsxwriter\n\n\ndef export_check(text):\n    workbook = xlsxwriter.Workbook('res.xlsx')\n    worksheet = workbook.add_worksheet()\n    text = text.split('\n')\n    s = 0\n    for i in range(len(text)):\n        name = text[i].split('\t')[0]\n        price = text[i].split('\t')[1]\n        n = text[i].split('\t')[2]\n        worksheet.write(i, 0, name)\n        worksheet.write(i, 1, float(price))\n        worksheet.write(i, 2, int(n))\n        worksheet.write(i, 3, '=B' + str(i + 1) + '*C' + str(i + 1))\n        s += 1\n    worksheet.write(s, 0, '\u0418\u0442\u043e\u0433\u043e')\n    worksheet.write(s, 3, '=SUM(D1:D' + str(s) + ')')\n    workbook.close()\n\u0412 7 \u0441\u0442\u0440\u043e\u043a\u0435 \\ n, 10-12 = \\ t", "\u0427\u0435\u043a\u0438": "\nimport xlsxwriter\n\n\ndef export_check(text):\n    workbook = xlsxwriter.Workbook('res.xlsx')\n\n    checks = list(map(lambda x: sorted(x.split('\n')), text.split(\"---\")))\n    for i in checks:\n        add = {}\n        for j in i:\n            if j == '':\n                continue\n\n            cc = j.split('\t')\n            key, val = (cc[0], int(cc[1])), int(cc[2])\n\n            if key in add:\n                add[key] += val\n            else:\n                add[key] = val\n        s1 = add.keys()\n        s = []\n        for i in s1:\n            s.append([i[0], int(add[i]), int(i[1])])\n        s.sort()\n        f = {}\n        for i in s:\n            f[(i[0], i[2])] = add[(i[0], i[2])]\n            del add[(i[0], i[2])]\n        if f:\n            worksheet = workbook.add_worksheet()\n            for row, (item_price, count) in enumerate(f.items()):\n                worksheet.write(row, 0, item_price[0])\n                worksheet.write(row, 1, float(item_price[1]))\n                worksheet.write(row, 2, float(count))\n                worksheet.write(row, 3, f'=B{row + 1}*C{row + 1}')\n\n            row += 1\n\n            worksheet.write(row, 0, '\u0418\u0442\u043e\u0433\u043e')\n            worksheet.write(row, 3, f'=SUM(D1:D{row})')\n    workbook.close()\n\u0412 \u0441\u0442\u0440\u043e\u043a\u0435 7 \\ n", "\u0412\u044b\u0431\u043e\u0440\u043a\u0438": "\nclass Selector:\n    def __init__(self, list_):\n        self.__odds = list(filter(lambda elem: elem % 2 == 1, list_))\n        self.__evens = list(filter(lambda elem: elem % 2 == 0, list_))\n\n    def get_odds(self):\n        return self.__odds\n\n    def get_evens(self):\n        return self.__evens", "\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439": "\nclass LeftParagraph:\n    def __init__(self, n):\n        self.text = []\n        self.n = n\n\n    def add_word(self, add):\n        self.text.append(add)\n\n    def end(self):\n        st = self.text[0]\n        for i in range(1, len(self.text)):\n            if self.n - len(st) - 1 >= len(self.text[i]):\n                st = st + ' ' + self.text[i]\n            else:\n                print(st)\n                st = self.text[i]\n        print(st)\n        self.text.clear()\n\n\nclass RightParagraph:\n    def __init__(self, n):\n        self.text = []\n        self.n = n\n\n    def add_word(self, add):\n        self.text.append(add)\n\n    def end(self):\n        st = self.text[0]\n        for i in range(1, len(self.text)):\n            if self.n - len(st) - 1 >= len(self.text[i]):\n                st = st + ' ' + self.text[i]\n            else:\n                print((self.n - len(st)) * ' ' + st)\n                st = self.text[i]\n        print((self.n - len(st)) * ' ' + st)\n        self.text.clear()", "\u0424\u043e\u0440\u043c\u0430\u0442\u044b \u0434\u0430\u0442": "\nclass AmericanDate:\n    def __init__(self, year, month, date):\n        self.year = year\n        self.month = month\n        self.date = date\n\n    def set_year(self, j):\n        self.year = j\n\n    def set_month(self, j):\n        self.month = j\n\n    def set_day(self, j):\n        self.date = j\n\n    def get_year(self):\n        return self.year\n\n    def get_month(self):\n        return self.month\n\n    def get_day(self):\n        return self.date\n\n    def format(self):\n        if len(str(self.date)) == 1 and len(str(self.month)) == 1:\n            return '0' + str(self.month) + '.' + '0' + str(self.date) + '.' + str(self.year)\n        elif len(str(self.date)) == 1:\n            return str(self.month) + '.' + '0' + str(self.date) + '.' + str(self.year)\n        elif len(str(self.month)) == 1:\n            return '0' + str(self.month) + '.' + str(self.date) + '.' + str(self.year)\n        else:\n            return str(self.month) + '.' + str(self.date) + '.' + str(self.year)\n\n\nclass EuropeanDate:\n    def __init__(self, year, month, date):\n        self.year = year\n        self.month = month\n        self.date = date\n\n    def set_year(self, j):\n        self.year = j\n\n    def set_month(self, j):\n        self.month = j\n\n    def set_day(self, j):\n        self.date = j\n\n    def get_year(self):\n        return self.year\n\n    def get_month(self):\n        return self.month\n\n    def get_day(self):\n        return self.date\n\n    def format(self):\n        if len(str(self.date)) == 1 and len(str(self.month)) == 1:\n            return '0' + str(self.date) + '.' + '0' + str(self.month) + '.' + str(self.year)\n        elif len(str(self.date)) == 1:\n            return '0' + str(self.date) + '.' + str(self.month) + '.' + str(self.year)\n        elif len(str(self.month)) == 1:\n            return str(self.date) + '.' + '0' + str(self.month) + '.' + str(self.year)\n        else:\n            return str(self.date) + '.' + str(self.month) + '.' + str(self.year)", "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430": "\nclass MinStat:\n    def __init__(self):\n        self.chiselki = []\n\n    def add_number(self, arg):\n        self.chiselki.append(arg)\n\n    def result(self):\n        if len(self.chiselki) == 0:\n            return None\n        return min(self.chiselki)\n\n\nclass MaxStat:\n    def __init__(self):\n        self.chiselki = []\n\n    def add_number(self, arg):\n        self.chiselki.append(arg)\n\n    def result(self):\n        if len(self.chiselki) == 0:\n            return None\n        return max(self.chiselki)\n\n\nclass AverageStat:\n    def __init__(self):\n        self.chiselki = []\n        self.s = 0\n\n    def add_number(self, arg):\n        self.chiselki.append(arg)\n        self.s += 1\n\n    def result(self):\n        if len(self.chiselki) == 0:\n            return None\n        return sum(self.chiselki) / self.s", "\u0422\u0430\u0431\u043b\u0438\u0446\u0430": "\nclass Table:\n    def __init__(self, rows, cols):\n        self.rows, self.cols = rows, cols\n        self.matrix = [[0] * cols for _ in range(rows)]\n\n    def get_value(self, row, col):\n        if row >= self.rows or col >= self.cols or row < 0 or col < 0:\n            return None\n        return self.matrix[row][col]\n\n    def set_value(self, row, col, value):\n        self.matrix[row][col] = value\n\n    def n_rows(self):\n        return self.rows\n\n    def n_cols(self):\n        return self.cols", "\u041f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0438": "\nclass Rectangle:\n\n    def __init__(self, x, y, w_side, h_side):\n        self.__x1_coor = x\n        self.__y1_coor = y\n        self.__x2_coor = x + w_side\n        self.__y2_coor = y + h_side\n\n    def get_x(self):\n        return self.__x1_coor\n\n    def get_y(self):\n        return self.__y1_coor\n\n    def get_w(self):\n        return self.__x2_coor - self.__x1_coor\n\n    def get_h(self):\n        return self.__y2_coor - self.__y1_coor\n\n    def intersection(self, other: 'Rectangle'):\n        result_x1 = max(self.__x1_coor, other.__x1_coor)\n        result_y1 = max(self.__y1_coor, other.__y1_coor)\n        result_x2 = min(self.__x2_coor, other.__x2_coor)\n        result_y2 = min(self.__y2_coor, other.__y2_coor)\n\n        if result_x1 < result_x2 and result_y1 < result_y2:\n            return Rectangle(result_x1, result_y1, result_x2 - result_x1, result_y2 - result_y1)\n        return None", "\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c": "\nclass Table(object):\n\n    def __init__(self, rows, cols):\n        self._rows = rows\n        self._cols = cols\n        self._table = [[0] * cols for _ in range(rows)]\n\n    def get_value(self, row, col):\n        return (self._table[row][col] if 0 <= row < self._rows and 0 <= col < self._cols\n                else None)\n\n    def set_value(self, row, col, value):\n        self._table[row][col] = value\n\n    def n_rows(self):\n        return self._rows\n\n    def n_cols(self):\n        return self._cols\n\n    def delete_row(self, row):\n        self._table.pop(row)\n        self._rows -= 1\n\n    def delete_col(self, col):\n        for row in range(self._rows):\n            self._table[row].pop(col)\n        self._cols -= 1\n\n    def add_row(self, row):\n        self._table.insert(row, [0] * self._cols)\n        self._rows += 1\n\n    def add_col(self, col):\n        for row in range(self._rows):\n            self._table[row].insert(col, 0)\n        self._cols += 1\n\n\ndef main():\n    # Example 1\n    tab = Table(3, 5)\n    tab.set_value(0, 1, 10)\n    tab.set_value(1, 2, 20)\n    tab.set_value(2, 3, 30)\n    for i in range(tab.n_rows()):\n        for j in range(tab.n_cols()):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    tab.add_row(1)\n\n    for i in range(tab.n_rows()):\n        for j in range(tab.n_cols()):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    # Example 2\n    tab = Table(2, 2)\n\n    for i in range(tab.n_rows()):\n        for j in range(tab.n_cols()):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    tab.set_value(0, 0, 10)\n    tab.set_value(0, 1, 20)\n    tab.set_value(1, 0, 30)\n    tab.set_value(1, 1, 40)\n\n    for i in range(tab.n_rows()):\n        for j in range(tab.n_cols()):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    for i in range(-1, tab.n_rows() + 1):\n        for j in range(-1, tab.n_cols() + 1):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    tab.add_row(0)\n    tab.add_col(1)\n\n    for i in range(-1, tab.n_rows() + 1):\n        for j in range(-1, tab.n_cols() + 1):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    # Example 3\n    tab = Table(1, 1)\n\n    for i in range(tab.n_rows()):\n        for j in range(tab.n_cols()):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    tab.set_value(0, 0, 1000)\n\n    for i in range(tab.n_rows()):\n        for j in range(tab.n_cols()):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    for i in range(-1, tab.n_rows() + 1):\n        for j in range(-1, tab.n_cols() + 1):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n    tab.add_row(0)\n    tab.add_row(2)\n    tab.add_col(0)\n    tab.add_col(2)\n\n    tab.set_value(0, 0, 2000)\n    tab.set_value(0, 2, 3000)\n    tab.set_value(2, 0, 4000)\n    tab.set_value(2, 2, 5000)\n\n    for i in range(-1, tab.n_rows() + 1):\n        for j in range(-1, tab.n_cols() + 1):\n            print(tab.get_value(i, j), end=' ')\n        print()\n    print()\n\n\nif __name__ == \"__main__\":\n    main()", "\u041a\u0430\u043b\u043e\u0440\u0438\u0439\u043d\u043e\u0441\u0442\u044c": "\nclass FoodInfo:\n\n    def __init__(self, proteins, fats, carbohydrates):\n        self.__proteins = proteins\n        self.__fats = fats\n        self.__carbohydrates = carbohydrates\n\n    def get_proteins(self):\n        return self.__proteins\n\n    def get_fats(self):\n        return self.__fats\n\n    def get_carbohydrates(self):\n        return self.__carbohydrates\n\n    def get_kcalories(self):\n        return 4 * self.__proteins + 9 * self.__fats + 4 * self.__carbohydrates\n\n    def __add__(self, other):\n        new_proteins = self.__proteins + other.__proteins\n        new_fats = self.__fats + other.__fats\n        new_carbohydrates = self.__carbohydrates + other.__carbohydrates\n        return FoodInfo(new_proteins, new_fats, new_carbohydrates)", "\u0421\u043f\u0438\u0441\u043e\u043a \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435": "\nclass ReversedList:\n    def __init__(self, arg_list):\n        self.__reversed_list = arg_list.copy()\n        self.__number = len(arg_list)\n\n    def __len__(self):\n        return self.__number\n\n    def __getitem__(self, key):\n        return self.__reversed_list[self.__number - key - 1]", "\u041a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f": "\nclass SquareFunction:\n\n    def __init__(self, a, b, c):\n        self.__a = a\n        self.__b = b\n        self.__c = c\n\n    def __call__(self, x):\n        return self.__a * (x ** 2) + self.__b * x + self.__c", "\u0412\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435 \u0434\u0430\u0442": "\nimport datetime as dt\n\n\nclass Date:\n    def __init__(self, month, day):\n        self.month = month\n        self.day = day\n\n    def __sub__(self, other):\n        date1 = dt.date(2019, self.month, self.day)\n        date2 = dt.date(2019, other.month, other.day)\n        total_date = str(date1 - date2).split()\n        if len(total_date) == 1:\n            return 0\n        return total_date[0]", "\u0422\u043e\u0447\u043a\u0438 \u043d\u0430 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438": "\nclass Point:\n\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n\n    def __eq__(self, other):\n        if self.__y == other.__y and self.__x == other.__x:\n            return True\n        return False\n\n    def __ne__(self, other):\n        if self.__y == other.__y and self.__x == other.__x:\n            return False\n        return True", "\u0420\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432": "\nclass SparseArray:\n\n    def __init__(self):\n        self.__sparse_array = dict()\n\n    def __getitem__(self, key):\n        if key not in self.__sparse_array.keys():\n            return 0\n        return self.__sparse_array[key]\n\n    def __setitem__(self, key, value):\n        self.__sparse_array[key] = value\n        return self", "\u0421\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u0447\u043b\u0435\u043d\u043e\u0432": "\nclass Polynomial:\n    def __init__(self, koef):\n        self.koef = koef\n\n    def __call__(self, x):\n        s = 0\n        for i in range(len(self.koef)):\n            s += self.koef[i] * pow(x, i)\n        return s\n\n    def __add__(self, other):\n        st = []\n        k = Polynomial(st)\n        if len(self.koef) < len(other.koef):\n            m = len(self.koef)\n        else:\n            m = len(other.koef)\n        for i in range(m):\n            st.append(self.koef[i] + other.koef[i])\n        if len(self.koef) > m:\n            st += self.koef[m::]\n        else:\n            st += other.koef[m::]\n        k.koef = st\n        return k", "\u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0438": "\nclass Triangle:\n    def __init__(self, a, b, c):\n        self._a = a\n        self._b = b\n        self._c = c\n\n    def perimeter(self):\n        return self._a + self._b + self._c\n\n\nclass EquilateralTriangle(Triangle):\n    def __init__(self, a):\n        self._a = a\n        self._b = a\n        self._c = a", "\u0421\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u044b": "\nfrom functools import reduce\n\n\nclass Summator:\n    def __init__(self, arg_power=1):\n        self._power = arg_power\n\n    def transform(self, n):\n        return n\n\n    def sum(self, n):\n        return reduce(lambda value, elem: value + self.transform(elem), range(1, n + 1))\n\n\nclass PowerSummator(Summator):\n    def __init__(self, b):\n        super().__init__(b)\n\n    def transform(self, n):\n        return PowerSummator.__binary_power(n, self._power)\n\n    @staticmethod\n    def __binary_power(base, power):\n        if power == 0:\n            return 1\n        if power % 2 == 0:\n            temp = PowerSummator.__binary_power(base, power // 2)\n            return temp * temp\n        return base * PowerSummator.__binary_power(base, power - 1)\n\n\nclass SquareSummator(PowerSummator):\n    def __init__(self):\n        super().__init__(2)\n\n\nclass CubeSummator(PowerSummator):\n    def __init__(self):\n        super().__init__(3)", "\u0421\u0430\u0439\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0439": "\nclass Profile:\n    def __init__(self, type_profession):\n        self._type_profession = type_profession\n\n    def info(self):\n        return \"\"\n\n    def describe(self):\n        return self._type_profession + self.info()\n\n\nclass Vacancy(Profile):\n    def __init__(self, arg_type_profession, arg_salary):\n        super().__init__(arg_type_profession)\n        self.__salary = arg_salary\n\n    def info(self):\n        return f\"\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u0430\u044f \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430: {self.__salary}\"\n\n\nclass Resume(Profile):\n\n    def __init__(self, arg_type_profession, arg_work_exp):\n        super().__init__(arg_type_profession)\n        self.__work_experiense = arg_work_exp\n\n    def info(self):\n        return f\"\u0421\u0442\u0430\u0436 \u0440\u0430\u0431\u043e\u0442\u044b: {self.__work_experiense}\"", "\u0421\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u044b \u2013 2": "\nfrom functools import reduce\n\n\nclass Summator:\n    def __init__(self, arg_power=1):\n        self._power = arg_power\n\n    def transform(self, n):\n        return n\n\n    def sum(self, n):\n        return reduce(lambda value, elem: value + self.transform(elem), range(1, n + 1))\n\n\nclass PowerSummator(Summator):\n    def __init__(self, b):\n        super().__init__(b)\n\n    def transform(self, n):\n        return PowerSummator.__binary_power(n, self._power)\n\n    @staticmethod\n    def __binary_power(base, power):\n        if power == 0:\n            return 1\n        if power % 2 == 0:\n            temp = PowerSummator.__binary_power(base, power // 2)\n            return temp * temp\n        return base * PowerSummator.__binary_power(base, power - 1)\n\n\nclass SquareSummator(PowerSummator):\n    def __init__(self):\n        super().__init__(2)\n\n\nclass CubeSummator(PowerSummator):\n    def __init__(self):\n        super().__init__(3)", "\u0410\u043b\u0444\u0430\u0432\u0438\u0442 \u043a\u043b\u0430\u0441\u0441\u043e\u0432": "\nclass A:\n    def __init__(self):\n        pass\n\n    def __str__(self):\n        return 'A.__str__ method'\n\n    def hello(self):\n        print(\"Hello\")\n\n\nclass B:\n    def __init__(self):\n        pass\n\n    def __str__(self):\n        return 'B.__str__ method'\n\n    def good_evening(self):\n        print(\"Good evening\")\n\n\nclass C(A, B):\n    def __init__(self):\n        A.__init__(self)\n\n\nclass D(B, A):\n    def __init__(self):\n        B.__init__(self)", "\u041a\u043e\u043d\u044c": "\nclass Knight:\n    def __init__(self, row, col, color):\n        self._row = row\n        self._col = col\n        self._color = color\n\n    def can_move(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (col1 < 8):\n            if ((abs(row1 - self._row) == 2 and abs(col1 - self._col) == 1) \n                    or (abs(row1 - self._row) == 1 and abs(col1 - self._col) == 2)):\n                return True\n            return False\n        return False\n\n    def set_position(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (row1 < 8):\n            self._row = row1\n            self._col = col1\n\n    def get_color(self):\n        return self._color\n\n    def char(self):\n        return \"N\"", "\u0421\u043b\u043e\u043d": "\nclass Bishop:\n    def __init__(self, row, col, color):\n        self._row = row\n        self._col = col\n        self._color = color\n\n    def can_move(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (col1 < 8):\n            if abs(row1 - self._row) == abs(col1 - self._col):\n                return True\n            return False\n        return False\n\n    def set_position(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (row1 < 8):\n            self._row = row1\n            self._col = col1\n\n    def get_color(self):\n        return self._color\n\n    def char(self):\n        return \"B\"", "\u0424\u0435\u0440\u0437\u044c": "\nclass Queen:\n    def __init__(self, row, col, color):\n        self._row = row\n        self._col = col\n        self._color = color\n\n    def can_move(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (col1 < 8):\n            if ((abs(row1 - self._row) == abs(col1 - self._col)) or\n                    (abs(row1 - self._row) > -1 and col1 - self._col == 0) or\n                    (row1 - self._row == 0 and abs(col1 - self._row) > -1)):\n                return True\n            return False\n        return False\n\n    def set_position(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (row1 < 8):\n            self._row = row1\n            self._col = col1\n\n    def get_color(self):\n        return self._color\n\n    def char(self):\n        return \"Q\"", "\u041f\u043e\u043b\u044f \u043f\u043e\u0434 \u0431\u043e\u0435\u043c": "\nWHITE = 1\nBLACK = 2\n\n\nclass White:\n    def __eq__(self, other):\n        # \u0438\u0441\u0442\u0438\u043d\u0430, \u0435\u0441\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u043d\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 ==\n        # \u0442\u043e\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c (\u0430\u043d\u0433\u043b. instance) \u043a\u043b\u0430\u0441\u0441\u0430 Black\n        return isinstance(other, White)\n\n    def opponent(self):\n        return Black()\n\n    def is_black(self):\n        return True\n\n    def is_white(self):\n        return False\n\n\nclass Black:\n    def __eq__(self, other):\n        # \u0438\u0441\u0442\u0438\u043d\u0430, \u0435\u0441\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u043d\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 ==\n        # \u0442\u043e\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c (\u0430\u043d\u0433\u043b. instance) \u043a\u043b\u0430\u0441\u0441\u0430 Black\n        return isinstance(other, Black)\n\n    def opponent(self):\n        return White()\n\n    def is_black(self):\n        return True\n\n    def is_white(self):\n        return False\n\n\nclass Pawn:\n\n    def __init__(self, row, col, color):\n        self.row = row\n        self.col = col\n        self.color = color\n\n    def set_position(self, row, col):\n        self.row = row\n        self.col = col\n\n    def char(self):\n        return 'P'\n\n    def get_color(self):\n        return self.color\n\n    def can_move(self, row, col):\n        # \u041f\u0435\u0448\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0445\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438\n        # \"\u0432\u0437\u044f\u0442\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0445\u043e\u0434\u0435\" \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e\n        if self.col != col:\n            return False\n\n        # \u041f\u0435\u0448\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0445\u043e\u0434 \u043d\u0430 2 \u043a\u043b\u0435\u0442\u043a\u0438\n        # \u0432\u043f\u0435\u0440\u0451\u0434, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0432 start_row.\n        if self.color == WHITE:\n            direction = 1\n            start_row = 1\n        else:\n            direction = -1\n            start_row = 6\n\n        # \u0445\u043e\u0434 \u043d\u0430 1 \u043a\u043b\u0435\u0442\u043a\u0443\n        if self.row + direction == row:\n            return True\n\n        # \u0445\u043e\u0434 \u043d\u0430 2 \u043a\u043b\u0435\u0442\u043a\u0438 \u0438\u0437 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n        if self.row == start_row and self.row + 2 * direction == row:\n            return True\n\n        return False\n\n\nclass Rook:\n\n    def __init__(self, row, col, color):\n        self.row = row\n        self.col = col\n        self.color = color\n\n    def set_position(self, row, col):\n        self.row = row\n        self.col = col\n\n    def char(self):\n        return 'R'\n\n    def get_color(self):\n        return self.color\n\n    def can_move(self, row, col):\n        if self.row != row and self.col != col:\n            return False\n\n        return True\n\n\nclass Knight:\n    def __init__(self, row, col, color):\n        self._row = row\n        self._col = col\n        self._color = color\n\n    def can_move(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (col1 < 8):\n            if ((abs(row1 - self._row) == 2 and abs(col1 - self._col) == 1)\n                    or (abs(row1 - self._row) == 1 and abs(col1 - self._col) == 2)):\n                return True\n            return False\n        return False\n\n    def set_position(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (row1 < 8):\n            self._row = row1\n            self._col = col1\n\n    def get_color(self):\n        return self._color\n\n    def char(self):\n        return \"N\"\n\n\nclass Bishop:\n    def __init__(self, row, col, color):\n        self._row = row\n        self._col = col\n        self._color = color\n\n    def can_move(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (col1 < 8):\n            if abs(row1 - self._row) == abs(col1 - self._col):\n                return True\n            return False\n\n    def set_position(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (row1 < 8):\n            self._row = row1\n            self._col = col1\n\n    def get_color(self):\n        return self._color\n\n    def char(self):\n        return \"B\"\n\n\nclass Queen:\n    def __init__(self, row, col, color):\n        self._row = row\n        self._col = col\n        self._color = color\n\n    def can_move(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (col1 < 8):\n            if ((abs(row1 - self._row) == abs(col1 - self._col)) or\n                    (abs(row1 - self._row) > -1 and col1 - self._col == 0) or\n                    (row1 - self._row == 0 and abs(col1 - self._row) > -1)):\n                return True\n            return False\n        return False\n\n    def set_position(self, row1, col1):\n        if (row1 > -1) and (row1 < 8) and (col1 > -1) and (row1 < 8):\n            self._row = row1\n            self._col = col1\n\n    def get_color(self):\n        return self._color\n\n    def char(self):\n        return \"Q\"\n\n\ndef correct_coords(row, col):\n    return 0 <= row < 8 and 0 <= col < 8\n\n\ndef opponent(color):\n    if color == WHITE:\n        return BLACK\n    return WHITE\n\n\nclass Board:\n    def __init__(self):\n        self.color = WHITE\n        self.field = []\n        for row in range(8):\n            self.field.append([None] * 8)\n        self.field[1][4] = Pawn(1, 4, WHITE)\n\n    def current_player_color(self):\n        return self.color\n\n    def cell(self, row, col):\n\n        piece = self.field[row][col]\n        if piece is None:\n            return '  '\n        color = piece.get_color()\n        c = 'w' if color == WHITE else 'b'\n        return c + piece.char()\n\n    def move_piece(self, row, col, row1, col1):\n        if not correct_coords(row, col) or not correct_coords(row1, col1):\n            return False\n        if row == row1 and col == col1:\n            return False  # \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u0439\u0442\u0438 \u0432 \u0442\u0443 \u0436\u0435 \u043a\u043b\u0435\u0442\u043a\u0443\n        piece = self.field[row][col]\n        if piece is None:\n            return False\n        if piece.get_color() != self.color:\n            return False\n        if not piece.can_move(row1, col1):\n            return False\n        self.field[row][col] = None\n        self.field[row1][col1] = piece\n        piece.set_position(row1, col1)\n        self.color = opponent(self.color)\n        return True\n\n    def is_under_attack(self, row, col, color):\n        for elem in self.field:\n            for el in elem:\n                if el is not None:\n                    if el.can_move(row, col) and el.get_color() == color:\n                        return True          \n        return False"}